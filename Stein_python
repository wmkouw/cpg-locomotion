import numpy as np
import matplotlib.pyplot as plt

# Parameters for the Stein model
p = 10.0  # Controls the rate of adaptation
b = -2000.0  # Adaptation parameter (corrected to be positive)
q = 30.0  # Controls the rate of adaptation
Lambda = -0.2  # Inhibitory coupling strength


'''
# WALK GAIT  
a = 10.0;
f = 35.0;
k1 = 0.0;
k2 = 0.0;
'''
 # TROT GAIT  NOT WORKING 3 in phase 1 out of phase 
a = 12.0;
f = 40.0;
k1 = 0.1;
k2 = 57.0;
'''# BOUND GAIT
a = 16.0
f = 50.0
k1 = 0.1
k2 = 59.0'''




# Time parameters
T = 5  # Total simulation time
dt = 0.010  # Time step
time = np.arange(0, T + dt, dt)  # Time vector

# Initialization
num_neurons = 4
x = np.zeros((num_neurons, len(time)))  # Membrane potential for neurons
y = np.zeros((num_neurons, len(time)))  # Adaptation variable y
z = np.zeros((num_neurons, len(time)))  # Adaptation variable z

# Initial conditions
x[:, 0] = [0.1, 0.15, 0.2, 0.25]
y[:, 0] = [0.1, 0.12, 0.14, 0.16]
z[:, 0] = [0.1, 0.13, 0.17, 0.19]

# Define inhibitory connections (Z4 symmetry - ring network)
inhibition_matrix = np.array([
    [0, Lambda, 0, 0],  # Neuron 1 inhibits 2
    [0, 0, 0, Lambda],  # Neuron 2 inhibits 4
    [Lambda, 0, 0, 0],  # Neuron 3 inhibits 1
    [0, 0, Lambda, 0]   # Neuron 4 inhibits 3
])

# Simulate the Stein model
for t in range(1, len(time)):
    for i in range(num_neurons):
        # Compute the driving signal fi with INCOMING inhibitory coupling
        incoming_coupling = np.sum(inhibition_matrix[:, i] * x[:, t-1])
        fi = f * (1 + k1 * np.sin(k2 * time[t])) + incoming_coupling

        # Logistic function for adaptation
        adaptation = 1 / (1 + np.exp(-fi - b * y[i, t-1] + b * z[i, t-1]))

        # Update equations
        dx = dt * (a * (-x[i, t-1] + adaptation))
        dy = dt * (x[i, t-1] - p * y[i, t-1])
        dz = dt * (x[i, t-1] - q * z[i, t-1])

        # Store updated values
        x[i, t] = x[i, t-1] + dx
        y[i, t] = y[i, t-1] + dy
        z[i, t] = z[i, t-1] + dz

# Plot individual neuron activities
plt.figure()
for i in range(num_neurons):
    plt.subplot(4, 1, i + 1)
    plt.plot(time, x[i, :])
    plt.xlabel('Time (s)')
    plt.ylabel(f'x_{i+1}')
    plt.legend([f'Neuron {i+1}'])
    plt.xlim(0, 2)

# Plot all neuron activities together
plt.figure()
for i in range(num_neurons):
    plt.plot(time, x[i, :])
plt.xlabel('Time (s)')
plt.ylabel('Neuron Activity')
plt.title('Stein Model Neural Oscillators')
plt.legend(['Neuron 1', 'Neuron 2', 'Neuron 3', 'Neuron 4'])
plt.grid(True)
plt.xlim(0, 2)
plt.show()
